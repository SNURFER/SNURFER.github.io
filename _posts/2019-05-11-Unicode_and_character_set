### 유니코드와 문자 집합

---

* ASCII

영어의 경우 7bit 0~127의 숫자 내에서 모든 알파벳을 표현할 수 있다. 예전부터 사용되는 문자 집합(character set)이다. 32~127사이의 숫자를 사용하여 모든 문자가 표현가능하다.따라서 7비트로 편리하게 저장할 수 있다. 당시에는 대부분의 컴퓨터가 8Bit를 사용했기 때문에 모든 ASCII 문자를 저장 가능하고, 그 이상의 공간이 있었기 때문에 추가적인 정보를 넣기 시작했다. 1byte에는 8bit 공간이 있기 때문에 128~255의 공간에 새로운 정보를 담을 수 있었다. 

문제는 전세계의 PC들이 그 공간을 이용해서 자신들의 언어나 정보를 specify 하는 독자적인 문자 집합(character set)을 만들기 시작했다. 예를 들어, 일부 PC에서는 문자 코드 130이 é로 표시되지만 이스라엘에서 판매되는 컴퓨터에서는 히브리 문자 Gimel이므로 미국인이 이스라엘로 특정 text를 보내면 다른 의미로 해석되게 된다. 



* ANSI

위의 ASCII에서 128~255의 공간을 이용해 복잡한 문자 집합들이 생겨나면서 서로 text를 호환할 수 없자, 이를 통합할 규격이 필요하게 되어 나온게 ANSI라고 할 수 있다. ANSI는 128 미만에서는 ASCII와 동일하게 알파벳을 그대로 적용하게 되었다. 하지만 지역에 따라 128~255를 처리하는데에는 다양한 방법이 있다. 이런 서로 다른 시스템을 Code Page라고 부른다. Code Page는 지역마다 그 규격을 가지고 있다. 예를 들어서 그리스의 경우 CP 737라는 코드페이지를 이용해서 알파벳을 표현한다. 쉽게 말해 CodePage를 7bit뒤에 1bit 더붙여 각 언어 별로 code를 부여하여 code마다 다른 문자열 표를 참조하는 것이다.



* Multi Byte Character Set

중국이나 한국과 같은 아시아 권에서는 문자가 8bit에 들어가지 않는 수천 개 이상의 문자가 있고 이를 해결하기 위해서 Double Byte Character Set으로 해결을 하였다. 이 방식은 일부 문자는 1바이트로 저장되고 다른 문자는 2 바이트로 저장이 된다. ASCII 범위인 1byte에서는 기본적으로 ASCII와 똑같은 영문과 숫자, 기본적인 특수문자를 사용한다. 우리가 많이 들어본 EUC-KR, CP-949 도 이러한 방식으로 수많은 문자 표현을 해결하였다. 하지만 단일 문자마다 표현할 수 있는 길이가 달라지면서 다시 통합이 필요하게 되었다. 



* 유니코드

유니코드는 기본적으로 2Byte를 사용하는 것으로 생각하고 있으나, 사실은 그렇지 않다. 가변적이다라고 보는 것이 맞다. 유니 코드는 문자에 대해 생각하는 방식이 다르기 때문에 사물을 생각하는 유니 코드 방식을 이해해야 한다. 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 '표준'이며, 유니코드 협회(Unicode Consortium)가 제정했다. 글자와 코드가 매핑되어있는 표이다



* 인코딩

유니코드로 정의된 문자들을 실제로 메모리에 올리거나 mailing할 때 필요한 것이 바로 인코딩이다.  유니코드가 2byte라는 설은 유니코드 인코딩에 대한 초기 아이디어에서 비롯되었다. 문자마다 각각 2byte를 저장하는 것이다. 그래서 "Hello" 의 경우 아래와 같은 코드 포인트들의 집합이라고 할 수 있다. 

```
00 48 00 65 00 6C 00 6C 00 6F
```

리틀 엔디안/ 빅 엔디안에 따라 두가지 방법으로 유니코드를 저장하는 방식이 있었고, 이를 구분하기 위해 Unicode Byte Order Mark라는게 탄생했다. UTF-16 이상 인코딩 일 때, 문서의 맨 처음 BOM을 파악하여 리틀 엔디안/빅 엔디안을 구분하지만 UTF-8의 경우 바이트 순서와 상관 없기 때문에 BOM이 UTF-8이라는 signature가 된다. 하지만 모든 세상에 써져 있는 많은 유니코드 문자열의 시작부분에 Byte Order Mark가 항상 써져 있는 것은 아니었다. 

인코딩에서 주요하게 알아야 할 점은 plain text라는건 존재하지 않는 다는 것이다. 문자열, 메모리, 파일 또는 이메일 메시지에있는 경우 인코딩이 무엇인지 알아야한다. 그렇지 않으면이를 해석하거나 사용자에게 올바르게 표시 할 수 없다. 



* UTF-16 

앞서 말했던 2byte단위로 인코딩하는 방식이다. 유니코딩 인코딩 시, Byte Order Mark를 이용해 리틀 엔디안/ 빅 엔디안인지를 판단해야한다. 모든 글자를 4byte로 표현하는 UTF-32도 있다. 



* UTF-8

코드 포인트가 1byte에 저장되는 방식이다. 가변형 인코딩 방식으로 한글자를 1~4byte로 표현한다. 

1. 1byte로 표시된 문자의 최상위 bit는 항상 0이다.
2. 2byte 이상으로 표시된 문자의 경우, 첫 byte의 상위 bit들이 그 문자를 표시하는 데 필요한 byte 수를 결정한다. 
3. 첫 byte가 아닌 나머지 byte들은 상위 2비트가 항상 10이다.



